{"version":3,"file":"logger.js","names":["jsonLogFileFormat","winston","format","combine","errors","stack","timestamp","prettyPrint","createLogger","options","log_level","level","logger","expressFormat","indexOf","add","transports","Console","colorize","printf","message","File","filename","maxsize","maxFiles"],"sources":["../../src/util/logger.js"],"sourcesContent":["/*\n * Copyright 2021 WPPConnect Team\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport winston from 'winston';\n\n// Use JSON logging for log files\n// Here winston.format.errors() just seem to work\n// because there is no winston.format.simple()\nconst jsonLogFileFormat = winston.format.combine(\n  winston.format.errors({ stack: true }),\n  winston.format.timestamp(),\n  winston.format.prettyPrint()\n);\n\nexport function createLogger(options) {\n  const log_level = options.level;\n  // Create file loggers\n  const logger = winston.createLogger({\n    level: 'debug',\n    format: jsonLogFileFormat,\n    expressFormat: true,\n  });\n\n  // When running locally, write everything to the console\n  // with proper stacktraces enabled\n  if (options.logger.indexOf('console') > -1) {\n    logger.add(\n      new winston.transports.Console({\n        format: winston.format.combine(\n          winston.format.errors({ stack: true }),\n          winston.format.colorize(),\n          winston.format.printf(({ level, message, timestamp, stack }) => {\n            if (stack) {\n              // print log trace\n              return `${level}: ${timestamp} ${message} - ${stack}`;\n            }\n            return `${level}: ${timestamp} ${message}`;\n          })\n        ),\n      })\n    );\n  }\n  if (options.logger.indexOf('file') > -1) {\n    logger.add(\n      new winston.transports.File({\n        filename: './log/app.logg',\n        level: log_level,\n        maxsize: 10485760,\n        maxFiles: 3,\n      })\n    );\n  }\n\n  return logger;\n}\n"],"mappings":";;;;;;;;;;;;;;;AAeA,0DAA8B,CAf9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAdA,CAiBA;AACA;AACA;AACA,MAAMA,iBAAiB,GAAGC,gBAAO,CAACC,MAAM,CAACC,OAAO,CAC9CF,gBAAO,CAACC,MAAM,CAACE,MAAM,CAAC,EAAEC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,EACtCJ,gBAAO,CAACC,MAAM,CAACI,SAAS,EAAE,EAC1BL,gBAAO,CAACC,MAAM,CAACK,WAAW,EAAE,CAC7B,CAEM,SAASC,YAAY,CAACC,OAAO,EAAE,CACpC,MAAMC,SAAS,GAAGD,OAAO,CAACE,KAAK,CAAC,CAChC;EACA,MAAMC,MAAM,GAAGX,gBAAO,CAACO,YAAY,CAAC,EAClCG,KAAK,EAAE,OAAO,EACdT,MAAM,EAAEF,iBAAiB,EACzBa,aAAa,EAAE,IAAI,CACrB,CAAC,CAAC;;EAEF;EACA;EACA,IAAIJ,OAAO,CAACG,MAAM,CAACE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE;IAC1CF,MAAM,CAACG,GAAG;IACR,IAAId,gBAAO,CAACe,UAAU,CAACC,OAAO,CAAC;MAC7Bf,MAAM,EAAED,gBAAO,CAACC,MAAM,CAACC,OAAO;MAC5BF,gBAAO,CAACC,MAAM,CAACE,MAAM,CAAC,EAAEC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;MACtCJ,gBAAO,CAACC,MAAM,CAACgB,QAAQ,EAAE;MACzBjB,gBAAO,CAACC,MAAM,CAACiB,MAAM,CAAC,CAAC,EAAER,KAAK,EAAES,OAAO,EAAEd,SAAS,EAAED,KAAK,CAAC,CAAC,KAAK;QAC9D,IAAIA,KAAK,EAAE;UACT;UACA,OAAQ,GAAEM,KAAM,KAAIL,SAAU,IAAGc,OAAQ,MAAKf,KAAM,EAAC;QACvD;QACA,OAAQ,GAAEM,KAAM,KAAIL,SAAU,IAAGc,OAAQ,EAAC;MAC5C,CAAC,CAAC;;IAEN,CAAC,CAAC,CACH;;EACH;EACA,IAAIX,OAAO,CAACG,MAAM,CAACE,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;IACvCF,MAAM,CAACG,GAAG;IACR,IAAId,gBAAO,CAACe,UAAU,CAACK,IAAI,CAAC;MAC1BC,QAAQ,EAAE,gBAAgB;MAC1BX,KAAK,EAAED,SAAS;MAChBa,OAAO,EAAE,QAAQ;MACjBC,QAAQ,EAAE;IACZ,CAAC,CAAC,CACH;;EACH;;EAEA,OAAOZ,MAAM;AACf"}